
statements: NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr: KEYWORD:VAR IDENTIFIER EQ expr
     | comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*)
comp-expr: NOT comp-expr | arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
arith-expr: term ((PLUS|MINUS) term)*
term: factor ((MUL|DIV) factor)*

call : factor (LPAREN (expr (COMMA IDENTIFIER)*)? RPAREN)?

factor: INT|FLOAT|IDENTIFER |
        LPAREN expr RPAREN | MINUS factor | PLUS factor
        : if-expr
        : for-expr
        : list-expr
        : while-expr
        : func-def

list_expr: LSQUARE (expr (COMMA IDENTIFIER)*)? RSQUARE

if-expr: KEYWORD:IF expr KEYWORD:THEN
           (expr if-expr-b|if-expr-c?) | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b: KEYWORD:ELIF expr KEYWORD:THEN
           (expr if-expr-b|if-expr-c?) | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)
if-expr-c: KEYWORD: ELSE expr | (NEWLINE statements KEYWORD:END)

for-expr: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr (KEYWORD:STEP expr)?
          KEYWORD:THEN expr | (NEWLINE statements KEYWORD:END)

while-expr: KEYWORD:WHILE expr KEYWORD:THEN expr | (NEWLINE statements KEYWORD:END)
func-def: KEYWORD:FUNC IDENTIFIER LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
          KEYWORD:THEN expr | (NEWLINE statements KEYWORD:END)

